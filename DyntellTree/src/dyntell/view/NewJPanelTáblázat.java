package dyntell.view;


import java.awt.event.ContainerListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import dyntell.database.Database;
import dyntell.model.person.Person;
import dyntell.model.table.TableHandler;
import dyntell.model.tree.DNDTreeHandler;

/**
 *
 * @author Sa
 */
public class NewJPanelTáblázat extends javax.swing.JPanel {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private DefaultTableModel tableModel;
	JTree jtree;
	private String name ="";
	private  Double pont=0.0;
    DNDTreeHandler dndtree;
    TableHandler tableHandler;
    ArrayList<Integer> delList = new ArrayList<>();
    
    public NewJPanelTáblázat( DNDTreeHandler dndtree) {
        initComponents();      
     this.dndtree=dndtree;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldPoint = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();

        jTable1.setAutoCreateRowSorter(true);
       // jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        
        if(getTableModel()==null){
        	setTableModel((JTree.tableModelLoad()));}
        jTable1.setModel(tableModel);		
      
        
       // String name = tableModel.getValueAt(jTable1.getSelectedRow(), 0).toString();
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Change");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }

			private void jTable1MouseClicked(MouseEvent evt) {
				setName(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString());
				setPont((Double) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1));
				// String name = tableModel.getValueAt(jTable1.getSelectedRow(), 0).toString();
				System.out.println("name: " + name + "  pont: " +pont);
				jTextFieldName.setText(name);
				jTextFieldPoint.setText(pont.toString());
				
			}
        });


       /* javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(0, 69, Short.MAX_VALUE))
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
        );*/
        
        jLabel1.setText("Name:");

        jLabel2.setText("Point:");
        jTextFieldName.setSize(100, 100);
        jTextFieldPoint.setSize(100, 100);

        jTextFieldName.setText("           ");
        jTextFieldPoint.setText("           ");

        jTextFieldPoint.setText(getPont().toString());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 141, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(16, 16, 16)
                        .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 69, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        
    }// </editor-fold>                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { 
    	  int p= JOptionPane.showConfirmDialog(jPanel1, "Biztos módosítani akarod ?", "Módosít", JOptionPane.YES_NO_OPTION);
          if(p == 0){
        	  String nameFrom = name;
        	  String nameTo =getjTextFieldName().getText();
        	  String point1 =getjTextFieldPoint().getText();
        	  Double point2 = null;
			try {if(point1.equalsIgnoreCase("null")){
				point2 =0.0;
				changeClickTable(name, nameTo,point2);  	
			}else{
				point2 = Double.valueOf(point1);
				changeClickTable(name, nameTo,point2);  				
			}
			} catch (NumberFormatException e) {
				 JOptionPane.showMessageDialog(jPanel1, "Nem jól adtad meg a point értékét !");
			}

       	  // deleteClickTable(getName(),getPont());
       	 // dndtree.deleteClickTable(getName(),getPont());
       	  jTextFieldName.setText("          ");
       	  jTextFieldPoint.setText("          ");
       	  
             
          }
    	
    }                                        

   


	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {  
		System.out.println("jTable1.getSelectedRow(): " +jTable1.getSelectedRow());
		String valueAt ;
		
		int idWhere = 0;
		if(jTable1.getSelectedRow()==-1){
			JOptionPane.showMessageDialog(jPanel1, "Nincs kijelölve, hogy melyik elemhez akarod adni !");
		}else{
			valueAt=	jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
			System.out.println("valueAt: " + valueAt);
			String name3 ;
			name3= JOptionPane.showInputDialog("Add meg a nevet: ");
			
			if (!((name3 != null) && (name3.length() > 0))) {			
				JOptionPane.showMessageDialog(jPanel1, "Próbáld újra !");	
			}else{
				
			String point3 ;
			point3 = JOptionPane.showInputDialog("Add meg a pontot: ");
			if (!((point3 != null) && (point3.length() > 0))) {			
				JOptionPane.showMessageDialog(jPanel1, "Próbáld újra !");	
			}else{
			System.out.println("name3: " + name3 + "  point3: " + point3);
			Double pointd3 ;
						
			 if(point3.equalsIgnoreCase("null")){
				pointd3 =0.0;
				idWhere =search(valueAt);
				Database.addElem(idWhere, name3,pointd3);  	
				addElem(idWhere, name3,pointd3); //
			}else{
				try{
			
				pointd3 = Double.valueOf(point3);
				idWhere =search(valueAt);
				Database.addElem(idWhere, name3,pointd3);  	
				addElem(idWhere, name3,pointd3); //add listához
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(jPanel1, "Nem jól adtad meg a pontot !");
			}
				
			
			}
		}
			}
		}
		
		
    }                                        

    private int search(String name) {
		int id = 0;
		for(Person person :  dndtree.getPersonListFromDatabase()){
			if(person.getName().equals(name))
				id = person.getId();
		}
		return id;
	}


	private void addElem(int id_parent, String name3, Double pointd3) {
		int id = Database.searchId(id_parent,name3);
		System.out.println("id: "+id);
		dndtree.getPersonListFromDatabase().add(new Person(id, id_parent, name3, pointd3));
	
		//System.out.println("insert után: "+ dndtree.getPersonListFromDatabase());
	}


	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
      
        int p= JOptionPane.showConfirmDialog(jPanel1, "Biztos törölni akarod ?", "Töröl", JOptionPane.YES_NO_OPTION);
       if(p == 0){
          
    	   deleteClickTable(getName(),getPont());
    	 // dndtree.deleteClickTable(getName(),getPont());
    	  jTextFieldName.setText("          ");
    	  jTextFieldPoint.setText("          ");
    	  
          
       }
    }                                        


    private void deleteClickTable(String name2, Double pont2) {
    	delList.clear();
    	int id = 0;
    	int index=-1;
    	int searchIndex=0;
    	for(Person person: dndtree.getPersonListFromDatabase()){
    		index++;
			if((person.getName().equals(name2)) && (person.getPoint()==pont2)){
			searchIndex = index;
			id = person.getId();
			
			//dndtree.getPersonListFromDatabase().get(index);
		}
			//personListFromDatabase.remove(searchId);
	}
    	
    	delList.add(id);
    	searchChilds(delList);
    	System.out.println("delList: " + delList.toString());
    	if(delList.size()>1){
    		 int p= JOptionPane.showConfirmDialog(jPanel1, "A mappa nem üres, ha törlöd minden benne lévõ adat elvész!  Így is törölni akarod ?", "Töröl", JOptionPane.YES_NO_OPTION);
    	       if(p == 0){
    	          for(int j = 0 ; j < delList.size(); j++){
    	        	  Database.delete(delList.get(j)); //törlés adatbázisból
    	        	  System.out.println("id: "+ delList.get(j));
    	        	  int indexPerson=-1;
    	        	  int delIndex = -1;
    	        	 for(Person person : dndtree.getPersonListFromDatabase()){
    	        		 indexPerson++;
    	        		 if(person.getId()== delList.get(j)){
    	        			delIndex = indexPerson;
    	        		 }
    	        	 }
    	        
    	        	 dndtree.getPersonListFromDatabase().remove(delIndex); //törlés a listából
    	          }
    	           JOptionPane.showMessageDialog(jPanel1, "Töröltem");
    	       }
    		
    	}else{
    		Database.delete(id);
    		dndtree.getPersonListFromDatabase().remove(searchIndex) ;
    		JOptionPane.showMessageDialog(jPanel1, "Töröltem");
    	}    	
    	
    	System.out.println(dndtree.getPersonListFromDatabase().toString());
    	setTableModel((JTree.tableModelLoad()));
    	jTable1.setModel(tableModel);		
    	//Form.initComponents();    	
    }

	private void searchChilds(ArrayList<Integer> delList) {
		for(int i= 0; i < delList.size(); i++){
		for(Person person : dndtree.getPersonListFromDatabase()){
			if(person.getId_Parent()==delList.get(i)){
				delList.add(person.getId());				
			}
		}
		}
		
		
	}
	
	 private void changeClickTable(String nameFrom, String nameTo, Double point2) {
			System.out.println("nameFrom: "+nameFrom + " nameTo: " +nameTo +"  point:  "+point2);
			boolean hiba = false;
			for(Person person : dndtree.getPersonListFromDatabase() ){
				if(person.getName().equals(nameFrom)){
					if(nameFrom.equals(nameTo)){
						person.setPoint(point2); 	
						Database.updateNamePointToDatabase(person.getId(),nameTo,point2);
					}else{
						for(Person person2 : dndtree.getPersonListFromDatabase() ){
							if(person2.getName().equals(nameTo) && (person2.getId_Parent()==person.getId_Parent())){
								JOptionPane.showMessageDialog(jPanel1, "Ilyen név már van ebben a könyvtárban. Kérlek adj neki más nevet !");
								hiba = true;
							}						
					}
					}
					if(!hiba){
						Database.updateNamePointToDatabase(person.getId(),nameTo,point2);
						person.setName(nameTo);	
						person.setPoint(point2); 
						System.out.println("update után :  "+ dndtree.getPersonListFromDatabase().toString());
						//dndtree.dataUploadToTreeData(null);
						//JOptionPane reload = new JOptionPane(Form.onLoad);
						jtree.tableDraw();
					}
				}
			}
			setTableModel((JTree.tableModelLoad()));
	    	jTable1.setModel(tableModel);		
			
		}

	// Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPoint;
    // End of variables declaration          
	public javax.swing.JTable getjTable1() {
		return jTable1;
	}

	public void setjTable1(javax.swing.JTable jTable1) {
		this.jTable1 = jTable1;
	}

	public DefaultTableModel getTableModel() {
		return tableModel;
	}

	public void setTableModel(DefaultTableModel tableModel) {
		this.tableModel = tableModel;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getPont() {
		return pont;
	}

	public void setPont(Double pont) {
		this.pont = pont;
	}


	public javax.swing.JPanel getjPanel1() {
		return jPanel1;
	}


	public void setjPanel1(javax.swing.JPanel jPanel1) {
		this.jPanel1 = jPanel1;
	}


	public javax.swing.JTextField getjTextFieldName() {
		return jTextFieldName;
	}


	public void setjTextFieldName(javax.swing.JTextField jTextFieldName) {
		this.jTextFieldName = jTextFieldName;
	}


	public javax.swing.JTextField getjTextFieldPoint() {
		return jTextFieldPoint;
	}


	public void setjTextFieldPoint(javax.swing.JTextField jTextFieldPoint) {
		this.jTextFieldPoint = jTextFieldPoint;
	}
    
	
}
